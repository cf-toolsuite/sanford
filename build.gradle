plugins {
	id 'java'
	id 'org.cyclonedx.bom' version '1.10.0'
	id 'com.gorylenko.gradle-git-properties' version '2.4.2'
	id 'org.springframework.boot' version '3.4.0-M3'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.cftoolsuite'


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://packages.atlassian.com/repository/public' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	set('springAiVersion', "1.0.0-SNAPSHOT")
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
	if (project.hasProperty('model-api-provider') && project.getProperty('model-api-provider') == 'ollama') {
		implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'chroma') {
		implementation 'org.springframework.ai:spring-ai-chroma-store-spring-boot-starter'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'pgvector') {
		implementation 'org.springframework.ai:spring-ai-pgvector-store-spring-boot-starter'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'redis') {
		implementation 'org.springframework.ai:spring-ai-redis-store-spring-boot-starter'
	}
	implementation 'org.apache.commons:commons-lang3'
	if (project.hasProperty('vector-db-provider') || project.hasProperty('model-api-provider')) {
		implementation 'io.micrometer:micrometer-tracing-bridge-otel'
		implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
	}
	implementation 'io.minio:minio:8.5.12'
	implementation 'com.emc.ecs:object-client:3.4.10'
	implementation 'io.pivotal.cfenv:java-cfenv-all:3.2.0'
	implementation 'org.springframework.cloud:spring-cloud-bindings:2.0.3'
	implementation 'org.springframework.ai:spring-ai-markdown-document-reader'
	implementation 'org.springframework.ai:spring-ai-tika-document-reader'
	implementation 'org.springframework.ai:spring-ai-pdf-document-reader'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveBaseName = project.findProperty('jarBaseName') ?: project.name
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

bootRun {
    systemProperties System.properties
}

jar {
    archiveBaseName = project.findProperty('jarBaseName') ?: project.name
}

task setVersion {
    doLast {
        def newVersion = project.hasProperty('newVersion') ? project.newVersion : version
        ant.propertyfile(file: "gradle.properties") {
            entry(key: "version", value: newVersion)
        }
    }
}

task printArtifactPath {
    doLast {
        println bootJar.archiveFile.get().asFile.absolutePath
    }
}
