plugins {
	id 'java'
	id 'org.cyclonedx.bom' version '2.3.1'
	id 'com.gorylenko.gradle-git-properties' version '2.5.2'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.eclipse.jkube.kubernetes' version '1.18.1'
	id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
}

group = 'org.cftoolsuite'


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2025.0.0")
	set('springAiVersion', "1.0.0")
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	implementation 'org.springframework.ai:spring-ai-starter-model-openai'
	if (project.hasProperty('model-api-provider') && project.getProperty('model-api-provider') == 'bedrock') {
		implementation 'org.springframework.ai:spring-ai-starter-model-bedrock'
		implementation 'org.springframework.ai:spring-ai-starter-model-bedrock-converse'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'chroma') {
		implementation 'org.springframework.ai:spring-ai-starter-vector-store-chroma'
	}
	if (project.hasProperty('model-api-provider') && project.getProperty('model-api-provider') == 'gemini') {
		implementation 'org.springframework.ai:spring-ai-starter-model-vertex-ai-gemini'
		implementation 'org.springframework.ai:spring-ai-starter-model-vertex-ai-embedding'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'gemfire') {
		implementation 'org.springframework.ai:spring-ai-starter-vector-store-gemfire'
	}
	if (project.hasProperty('model-api-provider') && project.getProperty('model-api-provider') == 'ollama') {
		implementation 'org.springframework.ai:spring-ai-starter-model-ollama'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'pgvector') {
		implementation 'org.springframework.ai:spring-ai-starter-vector-store-pgvector'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'redis') {
		implementation 'org.springframework.ai:spring-ai-starter-vector-store-redis'
	}
	if (project.hasProperty('vector-db-provider') && project.getProperty('vector-db-provider') == 'weaviate') {
		implementation 'org.springframework.ai:spring-ai-starter-vector-store-weaviate'
	}
	if (project.hasProperty('vector-db-provider')) {
		implementation 'org.springframework.ai:spring-ai-rag'
		implementation 'org.springframework.ai:spring-ai-advisors-vector-store'
	}
	implementation 'org.apache.commons:commons-lang3'
	if (project.hasProperty('vector-db-provider') || project.hasProperty('model-api-provider')) {
		implementation 'io.micrometer:micrometer-tracing-bridge-otel'
		implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
		implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
	}
	implementation 'io.minio:minio:8.5.17'
	implementation 'io.pivotal.cfenv:java-cfenv:3.5.0'
	implementation 'io.pivotal.cfenv:java-cfenv-boot:3.5.0'
	implementation 'com.cedarsoftware:json-io:4.59.0'
	implementation 'org.springframework.cloud:spring-cloud-bindings:2.0.4'
	implementation 'org.springframework.ai:spring-ai-spring-cloud-bindings'
	implementation 'org.springframework.ai:spring-ai-markdown-document-reader'
	implementation 'org.springframework.ai:spring-ai-tika-document-reader'
	implementation 'org.springframework.ai:spring-ai-pdf-document-reader'
	implementation 'io.github.springboot-addons:spring-boot-starter-httpclient5-actuator:1.1.4'
	implementation 'io.github.springboot-addons:spring-boot-starter-httpclient5-resilience4j:1.1.4'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	implementation ('de.hs-heilbronn.mi:crawler4j-with-hsqldb:5.1.3') {
		exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j2-impl'
  	}
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.assertj:assertj-core:3.27.4'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveBaseName = project.findProperty('jarBaseName') ?: project.name
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

bootRun {
    systemProperties System.properties
}

tasks.named('bootBuildImage') {
	imageName = "docker.io/${project.group.contains('.') ? project.group.tokenize('.').last() : project.group}/${project.name}:${project.version}"
	tags = [ "docker.io/${project.group.contains('.') ? project.group.tokenize('.').last() : project.group}/${project.name}:latest" ]
}

jar {
  archiveBaseName = project.findProperty('jarBaseName') ?: project.name
}

kubernetes {
	buildStrategy = 'buildpacks'
    generator {
        config {
            'spring-boot' {
                color = 'always'
            }
        }
    }
    helm {
        maintainers = [{
            name = 'Chris Phillipson'
        }]
    }
}

task setVersion {
    doLast {
        def newVersion = project.hasProperty('newVersion') ? project.newVersion : version
        ant.propertyfile(file: "gradle.properties") {
            entry(key: "version", value: newVersion)
        }
    }
}

task printArtifactPath {
    doLast {
        println bootJar.archiveFile.get().asFile.absolutePath
    }
}
